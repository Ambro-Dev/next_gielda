// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  username       String    @unique
  email          String    @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role Role @default(user)

  accounts   Account[]
  sessions   Session[]
  school     School?
  transports Transport[]
  Student    Student?
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

type LatLng {
  lat Float
  lng Float
}

model School {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  administratorId String      @unique @db.ObjectId
  administrator   User        @relation(fields: [administratorId], references: [id])
  students        Student[]
  transports      Transport[]
}

model Student {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  schoolId  String   @db.ObjectId
  userId    String   @unique @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  school    School   @relation(fields: [schoolId], references: [id])
}

model Transport {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  categoryId    String      @db.ObjectId
  category      Category    @relation(fields: [categoryId], references: [id])
  vehicleId     String      @db.ObjectId
  vehicle       Vehicle     @relation(fields: [vehicleId], references: [id])
  isAvailable   Boolean
  sendDate      DateTime
  timeAvailable Int
  receiveDate   DateTime
  directions    Directions?
  description   String
  creatorId     String      @db.ObjectId
  creator       User        @relation(fields: [creatorId], references: [id])
  typeId        String      @db.ObjectId
  type          Type        @relation(fields: [typeId], references: [id])
  objects       Object[]
  schoolId      String      @db.ObjectId
  school        School      @relation(fields: [schoolId], references: [id])
}

model Directions {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  start       LatLng
  finish      LatLng
  transportId String    @unique @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  transport   Transport @relation(fields: [transportId], references: [id])
}

model Object {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  createdAt   DateTime  @default(now())
  description String?
  amount      Int
  width       Int
  height      Int
  length      Int
  weight      Int
  updatedAt   DateTime  @updatedAt
  tansportId  String    @db.ObjectId
  transport   Transport @relation(fields: [tansportId], references: [id])
}

model Category {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  name       String      @unique
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  transports Transport[]
}

model Vehicle {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  name       String      @unique
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  transports Transport[]
}

model Type {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  name       String      @unique
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  transports Transport[]
}
